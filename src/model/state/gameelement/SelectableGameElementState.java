package model.state.gameelement;
//THIS ENTIRE CLASS IS PART OF MY MASTERPIECE
import java.util.ArrayList;
import java.util.List;
import model.state.gameelement.traits.Sighted;
import model.state.gameelement.traits.WidgetState;
import engine.visuals.elementVisuals.animations.AnimatorState;


/**
 * This is the most widely used GameElement. This type of GameElement has both a
 * bounding box and a vision box. This is the element that reacts to collisions
 * with DrawableGameElements.
 *
 * @author Steve
 *
 */
public class SelectableGameElementState extends DrawableGameElementState implements Sighted {
   
    private static final long serialVersionUID = 778064050257391179L;   
    
    /**
     * This is a list of wrappers that contain information about widgets that
     * have to be added to a particular game element. This DisplayerStates will
     * be generated by the game editor and are utilized by a factory to create
     * widgets
     */
    public List<WidgetState> myWidgetStates;
    private double[] myVisionBounds;
    
    public SelectableGameElementState (Number xPosition,
                                       Number yPosition,
                                       AnimatorState animatorState) {
        super(xPosition, yPosition, animatorState);
        myVisionBounds = new double[8];

        myWidgetStates = new ArrayList<WidgetState>();
    }

    /**
     * Adds AttributeDisplayStates to the list of displayerStates
     * 
     * @param widgetState
     *        An AttributeDisplayerState
     */
    public void addWidgetState (WidgetState widgetState) {
        this.myWidgetStates.add(widgetState);
    }

    /**
     * Removes a particular AttributeDisplayerState from the list of
     * DisplayerStates
     * 
     * @param widgetState
     *        An AttributeDisplayerState
     */
    public void deleteWidgetState (WidgetState widgetState) {
        for (int i = 0; i < myWidgetStates.size(); i++) {
            if (myWidgetStates.get(i) == widgetState) {
                myWidgetStates.remove(i);
                break;
            }
        }
    }

    public List<WidgetState> getWidgetStates () {
        return myWidgetStates;
    }
    
    @Override
    public double[] getVisionBounds () {
        return myVisionBounds;
    }

    @Override
    public void setVisionBounds (double[] bounds) {
        myVisionBounds = bounds;
    }

}
